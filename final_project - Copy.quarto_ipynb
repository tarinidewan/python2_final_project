{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# COVID-19 Testing and Vaccination Coverage Analysis in India: A State-wise Study\n",
        "\n",
        "**Team Members**\n",
        "\n",
        "Shreya Shravini (GitHub: @shreyashravini) \n",
        "\n",
        "Tarini Dewan (GitHub: @tarinidewan) \n",
        "\n",
        "<br>\n",
        "\n",
        "#### _Research Question: Did states with more comprehensive testing efforts achieve faster vaccination coverage during India's COVID-19 response?_\n",
        "\n",
        "<br>\n",
        "\n",
        "##### Data Sources\n",
        "\n",
        "We utilized three primary datasets:\n",
        "\n",
        "1. COVID-19 vaccination data (state-wise)\n",
        "2. Testing details by state\n",
        "3. State population projections for 2020 from UDAI\n",
        "4. Hospitals in India in 2018 from Ministry of Health and Family Welfare\n",
        "\n",
        "<br>\n"
      ],
      "id": "8c510613"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import datetime as dt\n",
        "import altair as alt\n",
        "import statsmodels as sm\n",
        "from statsmodels.formula.api import ols\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "id": "5e548fa5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<br>\n",
        "\n",
        "## 1. Data cleaning\n"
      ],
      "id": "cc0adf80"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# load datasets\n",
        "covid_vacc = pd.read_csv('C:/Users/Shreya Work/OneDrive/Documents/GitHub/python2_final_project/data/covid_vaccine_statewise.csv') # MODIFY PATH ACCORDINGLY\n",
        "covid_test = pd.read_csv('C:/Users/Shreya Work/OneDrive/Documents/GitHub/python2_final_project/data/StatewiseTestingDetails.csv') # MODIFY PATH ACCORDINGLY\n",
        "population = pd.read_csv('C:/Users/Shreya Work/OneDrive/Documents/GitHub/python2_final_project/data/state_population.csv') # MODIFY PATH ACCORDINGLY\n",
        "\n",
        "# convert dates to datetime\n",
        "covid_vacc['Date'] = pd.to_datetime(covid_vacc['Updated On'], format='%d/%m/%Y')\n",
        "covid_test['Date'] = pd.to_datetime(covid_test['Date'], format='mixed')\n",
        "\n",
        "# find number of missing values in each column\n",
        "print('covid_vacc missing rates')\n",
        "for col in covid_vacc.columns:\n",
        "    missing_rate = round(100*(covid_vacc[col].isna().sum())/len(covid_vacc), 2)\n",
        "    print(col, ': ', missing_rate) # variable of interest = Total Doses Administered\n",
        "\n",
        "# rename Total Doses Administered variable\n",
        "covid_vacc = covid_vacc.rename(columns={'Total Doses Administered': 'total_doses'})\n",
        "\n",
        "# drop missing values in total doses\n",
        "covid_vacc = covid_vacc[~covid_vacc['total_doses'].isna()]\n",
        "\n",
        "# sort values by state and date\n",
        "covid_vacc = covid_vacc.sort_values(['State', 'Date'])\n",
        "\n",
        "# total doses is monotonically increasing as a result of being a cumulative sum; finding daily dose values\n",
        "covid_vacc['lagged_value'] = covid_vacc.groupby('State')['total_doses'].shift(1)\n",
        "covid_vacc['lagged_value'] = covid_vacc['lagged_value'].fillna(0)\n",
        "covid_vacc['total_doses_day'] = covid_vacc['total_doses'] - covid_vacc['lagged_value']\n",
        "covid_vacc = covid_vacc[covid_vacc['total_doses_day']>=0] # this leads to some negative data which is erroneous (likely poor data collection); drop these rows (note: there is a pattern here as most of the negative values are on Mar 9, 2021, Feb 18, 2021, etc.)\n",
        "\n",
        "print('\\n')\n",
        "\n",
        "print('covid_test missing rates')\n",
        "for col in covid_test.columns:\n",
        "    missing_rate = round(100*(covid_test[col].isna().sum())/len(covid_test), 2)\n",
        "    print(col, ': ', missing_rate) # variable of interest = TotalSamples\n",
        "\n",
        "# total testing samples is also monotonically increasing as a result of being a cumulative sum; finding daily testing values\n",
        "covid_test = covid_test.sort_values(['State', 'Date'])\n",
        "covid_test['lagged_value'] = covid_test.groupby('State')['TotalSamples'].shift(1)\n",
        "covid_test['lagged_value'] = covid_test['lagged_value'].fillna(0)\n",
        "covid_test['total_samples_day'] = covid_test['TotalSamples'] - covid_test['lagged_value']\n",
        "covid_test = covid_test[covid_test['total_samples_day']>=0] # this leads to some negative data which is erroneous (likely poor data collection); drop these rows\n",
        "\n",
        "# Drop dates before 2021 (vaccination rollout only began in 2021)\n",
        "covid_vacc = covid_vacc[(covid_vacc['Date'] > '2020-12-31')] #& (covid_vacc['Date'] <= '2021-06-30')]\n",
        "covid_test = covid_test[(covid_test['Date'] > '2020-12-31')] #& (covid_test['Date'] <= '2021-06-30')]\n",
        "\n",
        "# Aggregate data to monthly level (instead of daily)\n",
        "covid_vacc['Month'] = covid_vacc['Date'].dt.strftime('%m').astype(int) \n",
        "covid_test['Month'] = covid_test['Date'].dt.strftime('%m').astype(int)\n",
        "\n",
        "# group data by state and month\n",
        "covid_vacc_monthly = covid_vacc.sort_values('Date').groupby(['State', 'Month'])['total_doses_day'].sum().reset_index()\n",
        "covid_test_monthly = covid_test.sort_values('Date').groupby(['State', 'Month'])['total_samples_day'].sum().reset_index()\n",
        "\n",
        "# Merge datasets\n",
        "covid_merged = pd.merge(covid_vacc_monthly, covid_test_monthly, on=['State', 'Month'], how='inner')\n",
        "covid_merged = pd.merge(covid_merged, population, on='State', how='left')\n",
        "\n",
        "# Calculate testing and vaccination rates\n",
        "covid_merged['testing_rate'] = 100*(covid_merged['total_samples_day'] / covid_merged['Projected Total Population'])\n",
        "covid_merged['vaccination_rate'] = 100*(covid_merged['total_doses_day'] / covid_merged['Projected Total Population'])\n",
        "\n",
        "# check that the merged dataset has 36 states\n",
        "print(covid_merged['State'].nunique())\n",
        "\n",
        "# find missing state\n",
        "for state in list(covid_vacc['State'].unique()):\n",
        "    if state not in list(covid_test['State'].unique()):\n",
        "        print('Missing state: ', state) # Dadra and Nagar Haveli and Daman and Diu\n",
        "\n",
        "# Save the merged dataset\n",
        "#covid_final = covid_merged.to_csv('/Users/tarini_dewan/Desktop/UChicago/Python_2/python2_final_project/data/covid_final.csv') # MODIFY PATH ACCORDINGLY\n",
        "\n",
        "print(covid_merged.head())"
      ],
      "id": "a3bf9b91",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<br>\n",
        "\n",
        "## 2. Exploring the data\n",
        "\n",
        "### Testing Rate and Vaccination Rate Progression\n"
      ],
      "id": "cb0079d3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "alt.data_transformers.disable_max_rows()\n",
        "\n",
        "# testing rate\n",
        "boxplot_test = alt.Chart(covid_merged).mark_boxplot().encode(\n",
        "    x=alt.X('State:N', title='State', axis=alt.Axis(labelAngle=270)),\n",
        "    y=alt.Y('testing_rate:Q', title='Testing Rate')\n",
        ").properties(\n",
        "    title='Distribution of Testing Rates by State',\n",
        ")\n",
        "\n",
        "boxplot_test\n",
        "\n",
        "# vaccination progression\n",
        "boxplot_vacc = alt.Chart(covid_merged).mark_boxplot().encode(\n",
        "    x=alt.X('State:N', title='State', axis=alt.Axis(labelAngle=270)),\n",
        "    y=alt.Y('vaccination_rate:Q', title='Vaccination Rate')\n",
        ").properties(\n",
        "    title='Distribution of Vaccination Rates by State',\n",
        ")\n",
        "\n",
        "boxplot_vacc\n",
        "\n",
        "# show both plots together\n",
        "combined_plot = alt.vconcat(\n",
        "    boxplot_test, \n",
        "    boxplot_vacc\n",
        ").resolve_scale(\n",
        "    y='shared'\n",
        ")\n",
        "\n",
        "combined_plot"
      ],
      "id": "390b8633",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Testing Data\n"
      ],
      "id": "efefcd80"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Part A: Time-Series Analysis\n",
        "\n",
        "# Monthly testing progression\n",
        "#plt.figure(figsize=(12, 6))\n",
        "#monthly_testing = covid_merged.groupby('Month')['testing_rate'].mean()\n",
        "#plt.plot(monthly_testing.index.astype(str), monthly_testing.values, marker='o')\n",
        "#plt.title('Average Monthly Testing Rate Across States')\n",
        "#plt.xlabel('Month')\n",
        "#plt.ylabel('Testing Rate per 100,000')\n",
        "#plt.xticks(rotation=45)\n",
        "#plt.grid(True)\n",
        "#plt.show()\n",
        "\n",
        "# covid testing (absolute) over months for all states combined\n",
        "test_time = covid_merged.groupby('Month')['total_samples_day'].sum().reset_index()\n",
        "\n",
        "line = alt.Chart(test_time).mark_line().encode(\n",
        "    x=alt.X('Month:O', title='Month'),\n",
        "    y=alt.Y('total_samples_day:Q', title='Testing')\n",
        ").properties(\n",
        "    title=' Covid Testing over Time (All States Combined)',\n",
        "    width=600,\n",
        "    height=400\n",
        ")\n",
        "\n",
        "# vaccination administration (absolute) over months for all states combined\n",
        "vacc_time = covid_merged.groupby('Month')['total_doses_day'].sum().reset_index()\n",
        "\n",
        "line2 = alt.Chart(vacc_time).mark_line(color='orange').encode(\n",
        "    x=alt.X('Month:O', title='Month'),\n",
        "    y=alt.Y('total_doses_day:Q', title='Vaccination')\n",
        ").properties(\n",
        "    title='Covid Vaccination over Time (All States Combined)',\n",
        "    width=600,\n",
        "    height=400\n",
        ")\n",
        "\n",
        "# adding a metric column to each dataset\n",
        "test_time['Metric'] = 'Testing'\n",
        "vacc_time['Metric'] = 'Vaccination'\n",
        "\n",
        "# combining the two datasets\n",
        "combined_time = pd.concat([test_time.rename(columns={'total_samples_day': 'Value'}),\n",
        "    vacc_time.rename(columns={'total_doses_day': 'Value'})])\n",
        "combined_time['Value'] = combined_time['Value']/1000000 # dividing by million\n",
        "\n",
        "# creating a combined chart for testing and vaccination progression over time\n",
        "combined_chart = alt.Chart(combined_time).mark_line().encode(\n",
        "    x=alt.X('Month:O', title='Month'),\n",
        "    y=alt.Y('Value:Q', title='Count (in millions)'),\n",
        "    color=alt.Color('Metric:N', title='Metric')\n",
        ").properties(\n",
        "    title='Testing and Vaccination Over Time (All States Combined)',\n",
        "    width=600,\n",
        "    height=400\n",
        ")\n",
        "\n",
        "combined_chart\n",
        "\n",
        "# Create population categories\n",
        "#covid_merged['population_category'] = pd.qcut(covid_merged['Projected Total Population'], \n",
        "#                                            q=4, \n",
        "#                                            labels=['Small', 'Medium', 'Large', 'Very Large'])\n",
        "#\n",
        "## Create boxplot of testing rates by population category\n",
        "#plt.figure(figsize=(10, 6))\n",
        "#sns.boxplot(data=covid_merged, x='population_category', y='testing_rate')\n",
        "#plt.title('Testing Rates by State Population Size')\n",
        "#plt.xlabel('Population Category')\n",
        "#plt.ylabel('Testing Rate per 100,000 population')\n",
        "#plt.grid(True, alpha=0.3)\n",
        "#plt.show()\n",
        "#\n",
        "## Print average testing rates by population category\n",
        "#print(\"\\nAverage Testing Rates by Population Category:\")\n",
        "#print(covid_merged.groupby('population_category')['testing_rate'].mean().round(2))\n",
        "#\n",
        "## Population category ranges\n",
        "#pop_ranges = covid_merged.groupby('population_category')['Projected Total Population'].agg(['min', 'max'])\n",
        "#print(\"\\nPopulation Category Ranges:\")\n",
        "#print(pop_ranges)\n",
        "#\n",
        "## Part C: Testing Rate Growth\n",
        "#\n",
        "# Calculate testing rate change\n",
        "testing_growth = covid_merged.groupby('State').agg({\n",
        "    'testing_rate': ['first', 'last', lambda x: (x.max() - x.min())/x.min() * 100]\n",
        "}).reset_index()\n",
        "testing_growth.columns = ['State', 'Initial_Rate', 'Final_Rate', 'Growth_Percentage']\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.barplot(data=testing_growth.sort_values('Growth_Percentage', ascending=False), \n",
        "            x='State', y='Growth_Percentage')\n",
        "plt.title('Testing Rate Growth by State (%)')\n",
        "plt.xticks(rotation=90)\n",
        "plt.ylabel('Growth in Testing Rate (%)')\n",
        "plt.show()"
      ],
      "id": "6a0c0b55",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Vaccination Data\n"
      ],
      "id": "4559bdcf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Part A: Temporal Analysis\n",
        "\n",
        "# Monthly vaccination progress\n",
        "#plt.figure(figsize=(12, 6))\n",
        "#monthly_vax = covid_merged.groupby('Month')['vaccination_rate'].mean()\n",
        "#plt.plot(monthly_vax.index.astype(str), monthly_vax.values, marker='o')\n",
        "#plt.title('Average Monthly Vaccination Rate Across States')\n",
        "#plt.xlabel('Month')\n",
        "#plt.ylabel('Vaccination Rate (%)')\n",
        "#plt.xticks(rotation=45)\n",
        "#plt.grid(True)\n",
        "#plt.show()\n",
        "#\n",
        "## Part B: Population Size Impact\n",
        "#\n",
        "## Create population categories\n",
        "#covid_merged['population_category'] = pd.qcut(covid_merged['Projected Total Population'], \n",
        "#                                            q=4, labels=['Small', 'Medium', 'Large', 'Very Large'])\n",
        "#\n",
        "## Box plot of vaccination rates by population category\n",
        "#plt.figure(figsize=(10, 6))\n",
        "#sns.boxplot(data=covid_merged, x='population_category', y='vaccination_rate')\n",
        "#plt.title('Vaccination Rates by State Population Size')\n",
        "#plt.xlabel('Population Category')\n",
        "#plt.ylabel('Vaccination Rate (%)')\n",
        "#plt.show()\n",
        "\n",
        "# Part C: Vaccination Efficiency\n",
        "\n",
        "# Calculate vaccination rate change\n",
        "vax_efficiency = covid_merged.groupby('State').agg({\n",
        "    'vaccination_rate': ['first', 'last', lambda x: x.max() - x.min()]\n",
        "}).reset_index()\n",
        "vax_efficiency.columns = ['State', 'Initial_Rate', 'Final_Rate', 'Rate_Change']\n",
        "\n",
        "# Plot vaccination rate change\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.barplot(data=vax_efficiency.sort_values('Rate_Change', ascending=False), \n",
        "            x='State', y='Rate_Change')\n",
        "plt.title('Vaccination Rate Change by State')\n",
        "plt.xticks(rotation=90)\n",
        "plt.ylabel('Change in Vaccination Rate (%)')\n",
        "plt.show()"
      ],
      "id": "4692e99c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<br>\n",
        "\n",
        "## 3. Relationship between vaccination and testing\n"
      ],
      "id": "74aa34e4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Part A: Testing vs Vaccination Rates (in Population context)\n",
        "\n",
        "#plt.figure(figsize=(12, 8))\n",
        "## Create scatter plot with point size based on population\n",
        "#for state in covid_merged['State'].unique():\n",
        "#    state_data = covid_merged[covid_merged['State'] == state]\n",
        "#    plt.scatter(state_data['testing_rate'], \n",
        "#                state_data['vaccination_rate'],\n",
        "#                s=state_data['Projected Total Population']/500000, # Size based on population\n",
        "#                alpha=0.6,\n",
        "#                label=state)\n",
        "#\n",
        "#plt.title('Testing vs Vaccination Rates (Point Size = Population)')\n",
        "#plt.xlabel('Testing Rate per 100,000 population')\n",
        "#plt.ylabel('Vaccination Rate (%)')\n",
        "#plt.xlim(0, 100000)  # Set x-axis limit to 100,000\n",
        "#plt.legend(bbox_to_anchor=(1.05, 1))\n",
        "#plt.grid(True)\n",
        "#plt.tight_layout()\n",
        "#plt.show()\n",
        "\n",
        "# abs\n",
        "scatter_abs = alt.Chart(covid_merged).mark_circle().encode(\n",
        "    x=alt.X('total_samples_day', title='Testing Samples'),\n",
        "    y=alt.Y('total_doses_day', title='Vaccination Doses')\n",
        ").properties(\n",
        "    title='Relationship Between Covid Testing and Vaccination',\n",
        "    width=600,\n",
        "    height=400\n",
        ")\n",
        "\n",
        "scatter_abs\n",
        "\n",
        "# pct\n",
        "state_agg = covid_merged.groupby('State', as_index=False).agg({\n",
        "    'testing_rate': 'mean',\n",
        "    'vaccination_rate': 'mean'\n",
        "})\n",
        "\n",
        "\n",
        "scatter_pct = alt.Chart(state_agg).mark_circle().encode(\n",
        "    x=alt.X('testing_rate', title='Average Testing Rate'),\n",
        "    y=alt.Y('vaccination_rate', title='Average Vaccination Rate')\n",
        ").properties(\n",
        "    title='Relationship Between Testing Rate and Vaccination Rate by State in India',\n",
        "    width=600,\n",
        "    height=400\n",
        ")\n",
        "\n",
        "scatter_pct\n",
        "\n",
        "text = alt.Chart(state_agg).mark_text(\n",
        "    align='left',\n",
        "    #dx=5,  # Offset the text position\n",
        "    #dy=-5  # Offset the text position\n",
        "    fontSize=5\n",
        ").encode(\n",
        "    x='testing_rate',\n",
        "    y='vaccination_rate',\n",
        "    text='State'\n",
        ")\n",
        "\n",
        "scatter_pct + text\n",
        "# Part B: Patterns across different population categories\n",
        "\n",
        "#plt.figure(figsize=(12, 8))\n",
        "#for category in covid_merged['population_category'].unique():\n",
        "#    category_data = covid_merged[covid_merged['population_category'] == category]\n",
        "#    plt.scatter(category_data['testing_rate'], \n",
        "#                category_data['vaccination_rate'],\n",
        "#                label=category,\n",
        "#                alpha=0.6)\n",
        "#\n",
        "#plt.title('Testing vs Vaccination Rates by Population Category')\n",
        "#plt.xlabel('Testing Rate per 100,000 population')\n",
        "#plt.ylabel('Vaccination Rate (%)')\n",
        "#plt.legend(title='Population Category')\n",
        "#plt.grid(True)\n",
        "#plt.tight_layout()\n",
        "#plt.show()"
      ],
      "id": "3ea9f9f0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<br>\n",
        "\n",
        "## 4. Correlation and regression analysis\n"
      ],
      "id": "3264cb03"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Correlation analysis\n",
        "#correlation = covid_merged[['testing_rate', 'vaccination_rate']].corr().iloc[0, 1]\n",
        "#print(f\"Correlation between testing rate and vaccination rate: {correlation:.2f}\")\n",
        "\n",
        "# Regression analysis\n",
        "model = ols('vaccination_rate ~ testing_rate + C(State)', data=covid_merged).fit() # with state fixed effects\n",
        "print(model.summary())\n",
        "\n",
        "# Create correlation matrix\n",
        "correlation_vars = ['vaccination_rate', 'testing_rate', 'Projected Total Population']\n",
        "correlation_matrix = covid_merged[correlation_vars].corr()\n",
        "correlation_matrix"
      ],
      "id": "1727c3e1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# adding hospital data as a proxy for infrastructure\n",
        "hospital = pd.read_csv('C:/Users/Shreya Work/OneDrive/Documents/GitHub/python2_final_project/data/Hospital_India.csv')\n",
        "\n",
        "# rename columns and rows in the hospital dataset that use '&'\n",
        "hospital = hospital.rename(columns={'State/UT/India': 'State'})\n",
        "hospital = hospital.rename(columns={'No. of beds available in public facilities': 'num_beds'})\n",
        "hospital = hospital.rename(index={'Andaman & Nicobar Islands': 'Andaman and Nicobar Islands'})\n",
        "hospital['State'] = hospital['State'].replace('Andaman & Nicobar Islands', 'Andaman and Nicobar Islands').replace('Jammu & Kashmir', 'Jammu and Kashmir')\n",
        "\n",
        "# merge this with our main covid_merged dataset\n",
        "covid_merged = pd.merge(covid_merged, hospital, on='State', how='left')"
      ],
      "id": "e461967b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "covid_merged['num_beds'] = pd.to_numeric(covid_merged['num_beds'], errors='coerce')\n",
        "covid_merged['Total'] = pd.to_numeric(covid_merged['Total'], errors='coerce')\n",
        "\n",
        "# Regression analysis\n",
        "model_hosp = ols('vaccination_rate ~ testing_rate + Total + testing_rate:Total + C(State)', \n",
        "    data=covid_merged\n",
        ").fit()\n",
        "print(model_hosp.summary())"
      ],
      "id": "2a6b4653",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<br>\n",
        "\n",
        "### Correlation Analysis\n",
        "The correlation coefficient of 0.61 indicates a moderately strong positive relationship between testing and vaccination rates. This suggests that states with higher testing rates generally tend to have higher vaccination rates.\n",
        "\n",
        "\n",
        "#### Regression Analysis Key Findings\n",
        "\n",
        "##### Model Fit\n",
        "\n",
        "- R-squared value of 0.373 indicates that approximately 37.3% of the variation in vaccination rates can be explained by testing rates\n",
        "\n",
        "- The adjusted R-squared (0.370) is very close to the R-squared, suggesting the model is not overfitted\n",
        "\n",
        "##### Statistical Significance\n",
        "\n",
        "- F-statistic of 122.6 with a p-value of 1.17e-22 indicates the model is highly statistically significant\n",
        "\n",
        "- The testing_rate coefficient (0.0002) is significant (p < 0.001), confirming a positive relationship with vaccination rates\n",
        "\n",
        "##### Coefficient Interpretation\n",
        "\n",
        "- Intercept of 2.7051: The expected vaccination rate when testing rate is zero\n",
        "\n",
        "- Testing_rate coefficient of 0.0002: For each unit increase in testing rate per 100,000 population, the vaccination rate increases by 0.0002 percentage points\n",
        "\n",
        "<br>\n",
        "\n",
        "## 5. Shiny app dashboard\n",
        "\n",
        "Insert some screenshots of dashboard\n",
        "\n",
        "<br>\n",
        "<br>\n",
        "\n",
        "## 6. Analysis \n",
        "\n",
        "Based on the comprehensive data analysis of COVID-19 testing and vaccination rates across Indian states from January to August 2021, several significant patterns and insights emerge:\n",
        "\n",
        "<br>\n",
        "\n",
        "---\n",
        "\n",
        "### Testing Distribution Analysis\n",
        "\n",
        "#### High Testing States: \n",
        "\n",
        "- Ladakh and Lakshadweep show exceptionally high testing rates (>150,000 per 100,000 population), though this is partly due to their small population base.\n",
        "- Metropolitan Regions: Delhi maintains consistently high testing rates (>100,000 per 100,000), reflecting urban capacity and infrastructure.\n",
        "- State Variations: Most states maintain testing rates between 20,000-60,000 per 100,000 population, showing significant interstate disparities.\n",
        "\n",
        "<br>\n",
        "---\n",
        "\n",
        "\n",
        "### Vaccination Progress Patterns\n",
        "\n",
        "#### Leading States:\n",
        "\n",
        "- Ladakh achieved nearly 58% vaccination rate by June 2021\n",
        "- Lakshadweep reached 62% vaccination coverage\n",
        "- Sikkim managed about 50% coverage\n",
        "\n",
        "#### Major States Performance:\n",
        "- Kerala maintained steady progress, reaching 28% by June\n",
        "- Maharashtra, despite high case loads, achieved 19.5% coverage\n",
        "- Uttar Pradesh, India's most populous state, reached 10.4% coverage\n",
        "\n",
        "<br>\n",
        "\n",
        "---\n",
        "\n",
        "### State-wise overall performance\n",
        "\n",
        "#### High-Performing Large States\n",
        "\n",
        "\n",
        "##### Maharashtra\n",
        "- Despite having India's second-largest population (123.1 million), achieved impressive vaccination coverage\n",
        "- Reached 19.5% vaccination rate by June 2021\n",
        "- Maintained consistent testing rates around 33,800 per 100,000 population\n",
        "- Success factors: Strong healthcare infrastructure and urban centers with good medical facilities1\n",
        "\n",
        "##### Karnataka\n",
        "- Population of 67.5 million\n",
        "- Achieved 25.9% vaccination rate by June 2021\n",
        "- Maintained high testing rates (50,700 per 100,000)\n",
        "- Key advantage: Tech hub Bangalore's infrastructure and private sector participation\n",
        "\n",
        "#### Underperforming States\n",
        "\n",
        "\n",
        "##### Bihar\n",
        "- Large population (124.8 million) but low vaccination rate of 10.5% by June 2021\n",
        "- Testing rates remained low at 26,600 per 100,000\n",
        "- Challenges: Limited healthcare infrastructure and large rural population\n",
        "\n",
        "##### Uttar Pradesh\n",
        "- India's most populous state (237.8 million)\n",
        "- Lowest vaccination rate among major states at 10.4% by June 2021\n",
        "- Testing rates remained consistently low (24,300 per 100,000)\n",
        "- Hindrances: Vast geographical area and inadequate healthcare facilities\n",
        "\n",
        "\n",
        "#### Key Factors for Success\n",
        "\n",
        "##### Healthcare Infrastructure\n",
        "\n",
        "- States with established medical facilities showed better performance\n",
        "- Urban centers with multiple vaccination sites performed better3\n",
        "\n",
        "##### Population Size Impact\n",
        "\n",
        "- Smaller states like Ladakh (57.9%) and Lakshadweep (62.6%) achieved higher vaccination rates\n",
        "- Large states required more complex logistics and distribution networks3\n",
        "\n",
        "<br>\n",
        "---\n",
        "\n",
        "\n",
        "### Correlation Between Testing and Vaccination\n",
        "\n",
        "Several patterns emerge from the data:\n",
        "\n",
        "- *Positive Correlation:* States with robust testing infrastructure generally achieved higher vaccination rates\n",
        "- *Small vs Large States:* Smaller states/UTs showed faster vaccination progress, possibly due to manageable population sizes\n",
        "- *Resource Utilization:* States that established strong testing systems early (like Delhi, Kerala) maintained efficient vaccination programs\n",
        "\n",
        "<br>\n",
        "\n",
        "---\n",
        "\n",
        "### Project Significance\n",
        "This analysis is significant for several reasons:\n",
        "\n",
        "\n",
        "#### Policy Implications\n",
        "\n",
        "- Demonstrates the importance of healthcare infrastructure in pandemic response\n",
        "- Highlights the need for targeted support to states with lower testing capabilities\n",
        "- Shows how early testing capacity correlates with vaccination efficiency\n",
        "\n",
        "\n",
        "#### Healthcare Planning\n",
        "\n",
        "- Provides insights for future pandemic preparedness\n",
        "- Identifies successful models from high-performing states\n",
        "- Reveals the importance of population size in healthcare delivery\n",
        "\n",
        "\n",
        "#### Resource Allocation\n",
        "\n",
        "- Helps understand how testing infrastructure impacts vaccination programs\n",
        "- Identifies states needing additional support\n",
        "- Shows the effectiveness of different state-level approaches\n",
        "\n",
        "\n",
        "#### Public Health Strategy\n",
        "\n",
        "- Demonstrates the value of comprehensive testing programs\n",
        "- Shows how early infrastructure investment impacts long-term outcomes\n",
        "- Highlights the importance of coordinated healthcare responses\n",
        "\n",
        "<br>\n",
        "---\n",
        "\n",
        "\n",
        "**This project reveals critical insights into India's COVID-19 response, showing how testing infrastructure and vaccination programs worked together in the nation's largest public health initiative.**\n"
      ],
      "id": "bd12a0ae"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\Shreya Work\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}